use super::arithmetictarget::{ArithmeticTarget, WideArithmeticTarget};
use super::flagsregister::FlagsRegister;

#[derive(Debug)]
pub enum JumpTest {
    Zero,
    NotZero,
    Carry,
    NotCarry,
    Always,
}

impl JumpTest {
    pub fn evaluate(&self, f: &FlagsRegister) -> bool {
        match self {
            JumpTest::Zero => f.zero(),
            JumpTest::NotZero => !f.zero(),
            JumpTest::Carry => f.carry(),
            JumpTest::NotCarry => !f.carry(),
            JumpTest::Always => true,
        }
    }
}

/// Nature of the Jump.
/// Pointers are a raw adress, like a function pointer.
/// Relative is moving below/above by X instructions
#[derive(Debug)]
pub enum JumpType {
    Relative8,
    _Relative16,
    _Pointer8,
    Pointer16,
    // Jump to the address in HL
    HL,
}

pub enum Instruction {
    Nop,
    Adc(ArithmeticTarget),
    Add(ArithmeticTarget),
    // ADD operation to the Stack pointer
    AddSp,
    // ADD operation to the HL register
    AddHL(WideArithmeticTarget),
    And(ArithmeticTarget),
    Ccf,
    Cp(ArithmeticTarget),
    Cpl,
    Dec(ArithmeticTarget),
    Dec16(WideArithmeticTarget),
    Inc(ArithmeticTarget),
    Inc16(WideArithmeticTarget),
    Or(ArithmeticTarget),
    Rla,
    Rlc(ArithmeticTarget),
    Rl(ArithmeticTarget),
    Rr(ArithmeticTarget),
    Rra,
    Rrc(ArithmeticTarget),
    Rrca,
    // NOT FOUND ?
    Rlca,
    Sbc(ArithmeticTarget),
    Sla(ArithmeticTarget),
    Sra(ArithmeticTarget),
    Srl(ArithmeticTarget),
    Sub(ArithmeticTarget),
    Swap(ArithmeticTarget),
    Xor(ArithmeticTarget),
    // target, source
    Load {
        from: ArithmeticTarget,
        to: ArithmeticTarget,
    },
    // Load 2 bytes from memory to 2 register
    Load16 {
        from: WideArithmeticTarget,
        to: WideArithmeticTarget,
    },

    // Jum
    Jump(JumpTest, JumpType),

    // Calling function / Stack
    Push(WideArithmeticTarget),
    Pop(WideArithmeticTarget),
    Call(JumpTest),
    Rst(u16),
    Ret(JumpTest),
    // Interrupt
    DisableInterrupt,
    EnableInterrupt,
    Stop,

    // target, byte to set
    Bit(ArithmeticTarget, u8),
    Set(ArithmeticTarget, u8),
    Res(ArithmeticTarget, u8),
    Halt,

    // Miscelanous
    /// Decimal Adjust Accumulator
    Daa,
    /// Set carry flag
    Scf,
}

impl Instruction {
    pub fn from_byte(byte: u8) -> Option<Instruction> {
        match byte {
            0x00 => Some(Instruction::Nop),
            0x01 => Some(Instruction::Load16 {
                from: WideArithmeticTarget::ReadWord,
                to: WideArithmeticTarget::BC,
            }),
            0x02 => Some(Instruction::Load {
                from: ArithmeticTarget::A,
                to: ArithmeticTarget::BCTarget,
            }),
            0x03 => Some(Instruction::Inc16(WideArithmeticTarget::BC)),
            0x04 => Some(Instruction::Inc(ArithmeticTarget::B)),
            0x05 => Some(Instruction::Dec(ArithmeticTarget::B)),
            0x06 => Some(Instruction::Load {
                from: ArithmeticTarget::ReadByte,
                to: ArithmeticTarget::B,
            }),
            // CHECKME RLCA normaly
            0x07 => Some(Instruction::Rlca),
            0x08 => Some(Instruction::Load16 {
                from: WideArithmeticTarget::SP,
                to: WideArithmeticTarget::ReadAddress,
            }),
            0x09 => Some(Instruction::AddHL(WideArithmeticTarget::BC)),
            0x0a => Some(Instruction::Load {
                from: ArithmeticTarget::BCTarget,
                to: ArithmeticTarget::A,
            }),
            0x0b => Some(Instruction::Dec16(WideArithmeticTarget::BC)),
            0x0c => Some(Instruction::Inc(ArithmeticTarget::C)),
            0x0d => Some(Instruction::Dec(ArithmeticTarget::C)),
            0x0e => Some(Instruction::Load {
                to: ArithmeticTarget::C,
                from: ArithmeticTarget::ReadByte,
            }),
            0x0f => Some(Instruction::Rrca),
            // STOP ?
            0x10 => Some(Instruction::Stop),
            0x11 => Some(Instruction::Load16 {
                to: WideArithmeticTarget::DE,
                from: WideArithmeticTarget::ReadWord,
            }),
            0x12 => Some(Instruction::Load {
                to: ArithmeticTarget::DETarget,
                from: ArithmeticTarget::A,
            }),
            0x13 => Some(Instruction::Inc16(WideArithmeticTarget::DE)),
            0x14 => Some(Instruction::Inc(ArithmeticTarget::D)),
            0x15 => Some(Instruction::Dec(ArithmeticTarget::D)),
            0x16 => Some(Instruction::Load {
                from: ArithmeticTarget::ReadByte,
                to: ArithmeticTarget::D,
            }),
            0x17 => Some(Instruction::Rla),
            0x18 => Some(Instruction::Jump(JumpTest::Always, JumpType::Relative8)),
            0x19 => Some(Instruction::AddHL(WideArithmeticTarget::DE)),
            0x1a => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::DETarget,
            }),
            0x1b => Some(Instruction::Dec16(WideArithmeticTarget::DE)),
            0x1c => Some(Instruction::Inc(ArithmeticTarget::E)),
            0x1d => Some(Instruction::Dec(ArithmeticTarget::E)),
            0x1e => Some(Instruction::Load {
                from: ArithmeticTarget::ReadByte,
                to: ArithmeticTarget::E,
            }),
            0x1f => Some(Instruction::Rra),
            0x20 => Some(Instruction::Jump(JumpTest::NotZero, JumpType::Relative8)),
            0x21 => Some(Instruction::Load16 {
                to: WideArithmeticTarget::HL,
                from: WideArithmeticTarget::ReadWord,
            }),
            0x22 => Some(Instruction::Load {
                from: ArithmeticTarget::A,
                to: ArithmeticTarget::HLInc,
            }),
            0x23 => Some(Instruction::Inc16(WideArithmeticTarget::HL)),
            0x24 => Some(Instruction::Inc(ArithmeticTarget::H)),
            0x25 => Some(Instruction::Dec(ArithmeticTarget::H)),
            0x26 => Some(Instruction::Load {
                from: ArithmeticTarget::ReadByte,
                to: ArithmeticTarget::H,
            }),
            0x27 => Some(Instruction::Daa),
            0x28 => Some(Instruction::Jump(JumpTest::Zero, JumpType::Relative8)),
            0x29 => unimplemented!("0x{:x}", byte),
            0x2a => Some(Instruction::Load {
                from: ArithmeticTarget::HLInc,
                to: ArithmeticTarget::A,
            }),
            0x2b => unimplemented!("0x{:x}", byte),
            0x2c => Some(Instruction::Inc(ArithmeticTarget::L)),
            0x2d => Some(Instruction::Dec(ArithmeticTarget::L)),
            0x2e => Some(Instruction::Load {
                from: ArithmeticTarget::ReadByte,
                to: ArithmeticTarget::L,
            }),
            0x2f => Some(Instruction::Cpl),
            0x30 => Some(Instruction::Jump(JumpTest::NotCarry, JumpType::Relative8)),
            // CHECKME
            0x31 => Some(Instruction::Load16 {
                to: WideArithmeticTarget::SP,
                from: WideArithmeticTarget::ReadWord,
            }),
            0x32 => Some(Instruction::Load {
                to: ArithmeticTarget::HLDec,
                from: ArithmeticTarget::A,
            }),
            0x33 => Some(Instruction::Inc16(WideArithmeticTarget::SP)),
            // TODO inc / dec for HL?
            0x34 => Some(Instruction::Inc(ArithmeticTarget::HLTarget)),
            0x35 => Some(Instruction::Dec(ArithmeticTarget::HLTarget)),
            0x36 => Some(Instruction::Load {
                from: ArithmeticTarget::ReadByte,
                to: ArithmeticTarget::HLTarget,
            }),
            0x37 => Some(Instruction::Scf),
            0x38 => Some(Instruction::Jump(JumpTest::Carry, JumpType::Relative8)),
            0x39 => Some(Instruction::AddHL(WideArithmeticTarget::SP)),
            0x3a => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::HLDec,
            }),
            0x3b => Some(Instruction::Dec16(WideArithmeticTarget::SP)),
            0x3c => Some(Instruction::Inc(ArithmeticTarget::A)),
            0x3d => Some(Instruction::Dec(ArithmeticTarget::A)),
            0x3e => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::ReadByte,
            }),
            0x3f => Some(Instruction::Ccf),
            0x40 => Some(Instruction::Load {
                to: ArithmeticTarget::B,
                from: ArithmeticTarget::B,
            }),
            0x41 => Some(Instruction::Load {
                to: ArithmeticTarget::B,
                from: ArithmeticTarget::C,
            }),
            0x42 => Some(Instruction::Load {
                to: ArithmeticTarget::B,
                from: ArithmeticTarget::D,
            }),
            0x43 => Some(Instruction::Load {
                to: ArithmeticTarget::B,
                from: ArithmeticTarget::E,
            }),
            0x44 => Some(Instruction::Load {
                to: ArithmeticTarget::B,
                from: ArithmeticTarget::H,
            }),
            0x45 => Some(Instruction::Load {
                to: ArithmeticTarget::B,
                from: ArithmeticTarget::L,
            }),
            0x46 => Some(Instruction::Load {
                to: ArithmeticTarget::B,
                from: ArithmeticTarget::HLTarget,
            }),
            0x47 => Some(Instruction::Load {
                to: ArithmeticTarget::B,
                from: ArithmeticTarget::A,
            }),
            0x48 => Some(Instruction::Load {
                to: ArithmeticTarget::C,
                from: ArithmeticTarget::B,
            }),
            0x49 => Some(Instruction::Load {
                to: ArithmeticTarget::C,
                from: ArithmeticTarget::C,
            }),
            0x4a => Some(Instruction::Load {
                to: ArithmeticTarget::C,
                from: ArithmeticTarget::D,
            }),
            0x4b => Some(Instruction::Load {
                to: ArithmeticTarget::C,
                from: ArithmeticTarget::E,
            }),
            0x4c => Some(Instruction::Load {
                to: ArithmeticTarget::C,
                from: ArithmeticTarget::H,
            }),
            0x4d => Some(Instruction::Load {
                to: ArithmeticTarget::C,
                from: ArithmeticTarget::L,
            }),
            0x4e => Some(Instruction::Load {
                to: ArithmeticTarget::C,
                from: ArithmeticTarget::B,
            }),
            0x4f => Some(Instruction::Load {
                to: ArithmeticTarget::C,
                from: ArithmeticTarget::A,
            }),
            0x50 => Some(Instruction::Load {
                to: ArithmeticTarget::D,
                from: ArithmeticTarget::B,
            }),
            0x51 => Some(Instruction::Load {
                to: ArithmeticTarget::D,
                from: ArithmeticTarget::C,
            }),
            0x52 => Some(Instruction::Load {
                to: ArithmeticTarget::D,
                from: ArithmeticTarget::D,
            }),
            0x53 => Some(Instruction::Load {
                to: ArithmeticTarget::D,
                from: ArithmeticTarget::E,
            }),
            0x54 => Some(Instruction::Load {
                to: ArithmeticTarget::D,
                from: ArithmeticTarget::H,
            }),
            0x55 => Some(Instruction::Load {
                to: ArithmeticTarget::D,
                from: ArithmeticTarget::L,
            }),
            0x56 => Some(Instruction::Load {
                to: ArithmeticTarget::D,
                from: ArithmeticTarget::B,
            }),
            0x57 => Some(Instruction::Load {
                to: ArithmeticTarget::D,
                from: ArithmeticTarget::A,
            }),
            0x58 => Some(Instruction::Load {
                to: ArithmeticTarget::E,
                from: ArithmeticTarget::B,
            }),
            0x59 => Some(Instruction::Load {
                to: ArithmeticTarget::E,
                from: ArithmeticTarget::C,
            }),
            0x5a => Some(Instruction::Load {
                to: ArithmeticTarget::E,
                from: ArithmeticTarget::D,
            }),
            0x5b => Some(Instruction::Load {
                to: ArithmeticTarget::E,
                from: ArithmeticTarget::E,
            }),
            0x5c => Some(Instruction::Load {
                to: ArithmeticTarget::E,
                from: ArithmeticTarget::H,
            }),
            0x5d => Some(Instruction::Load {
                to: ArithmeticTarget::E,
                from: ArithmeticTarget::L,
            }),
            0x5e => Some(Instruction::Load {
                to: ArithmeticTarget::E,
                from: ArithmeticTarget::B,
            }),
            0x5f => Some(Instruction::Load {
                to: ArithmeticTarget::E,
                from: ArithmeticTarget::A,
            }),
            0x60 => Some(Instruction::Load {
                to: ArithmeticTarget::H,
                from: ArithmeticTarget::B,
            }),
            0x61 => Some(Instruction::Load {
                to: ArithmeticTarget::H,
                from: ArithmeticTarget::C,
            }),
            0x62 => Some(Instruction::Load {
                to: ArithmeticTarget::H,
                from: ArithmeticTarget::D,
            }),
            0x63 => Some(Instruction::Load {
                to: ArithmeticTarget::H,
                from: ArithmeticTarget::E,
            }),
            0x64 => Some(Instruction::Load {
                to: ArithmeticTarget::H,
                from: ArithmeticTarget::H,
            }),
            0x65 => Some(Instruction::Load {
                to: ArithmeticTarget::H,
                from: ArithmeticTarget::L,
            }),
            0x66 => Some(Instruction::Load {
                to: ArithmeticTarget::H,
                from: ArithmeticTarget::B,
            }),
            0x67 => Some(Instruction::Load {
                to: ArithmeticTarget::H,
                from: ArithmeticTarget::A,
            }),
            0x68 => Some(Instruction::Load {
                to: ArithmeticTarget::L,
                from: ArithmeticTarget::B,
            }),
            0x69 => Some(Instruction::Load {
                to: ArithmeticTarget::L,
                from: ArithmeticTarget::C,
            }),
            0x6a => Some(Instruction::Load {
                to: ArithmeticTarget::L,
                from: ArithmeticTarget::D,
            }),
            0x6b => Some(Instruction::Load {
                to: ArithmeticTarget::L,
                from: ArithmeticTarget::E,
            }),
            0x6c => Some(Instruction::Load {
                to: ArithmeticTarget::L,
                from: ArithmeticTarget::H,
            }),
            0x6d => Some(Instruction::Load {
                to: ArithmeticTarget::L,
                from: ArithmeticTarget::L,
            }),
            0x6e => Some(Instruction::Load {
                to: ArithmeticTarget::L,
                from: ArithmeticTarget::HLTarget,
            }),
            0x6f => Some(Instruction::Load {
                to: ArithmeticTarget::L,
                from: ArithmeticTarget::A,
            }),
            0x70 => Some(Instruction::Load {
                to: ArithmeticTarget::HLTarget,
                from: ArithmeticTarget::B,
            }),
            0x71 => Some(Instruction::Load {
                to: ArithmeticTarget::HLTarget,
                from: ArithmeticTarget::C,
            }),
            0x72 => Some(Instruction::Load {
                to: ArithmeticTarget::HLTarget,
                from: ArithmeticTarget::D,
            }),
            0x73 => Some(Instruction::Load {
                to: ArithmeticTarget::HLTarget,
                from: ArithmeticTarget::E,
            }),
            0x74 => Some(Instruction::Load {
                to: ArithmeticTarget::HLTarget,
                from: ArithmeticTarget::H,
            }),
            0x75 => Some(Instruction::Load {
                to: ArithmeticTarget::HLTarget,
                from: ArithmeticTarget::L,
            }),
            // HALT
            0x76 => Some(Instruction::Halt),
            0x77 => Some(Instruction::Load {
                to: ArithmeticTarget::HLTarget,
                from: ArithmeticTarget::A,
            }),
            0x78 => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::B,
            }),
            0x79 => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::C,
            }),
            0x7a => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::D,
            }),
            0x7b => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::E,
            }),
            0x7c => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::H,
            }),
            0x7d => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::L,
            }),
            0x7e => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::HLTarget,
            }),
            0x7f => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::A,
            }),
            // ADD
            0x80 => Some(Instruction::Add(ArithmeticTarget::B)),
            0x81 => Some(Instruction::Add(ArithmeticTarget::C)),
            0x82 => Some(Instruction::Add(ArithmeticTarget::D)),
            0x83 => Some(Instruction::Add(ArithmeticTarget::E)),
            0x84 => Some(Instruction::Add(ArithmeticTarget::H)),
            0x85 => Some(Instruction::Add(ArithmeticTarget::L)),
            0x86 => Some(Instruction::Add(ArithmeticTarget::HLTarget)),
            0x87 => Some(Instruction::Add(ArithmeticTarget::A)),
            // ADC
            0x88 => Some(Instruction::Adc(ArithmeticTarget::B)),
            0x89 => Some(Instruction::Adc(ArithmeticTarget::C)),
            0x8a => Some(Instruction::Adc(ArithmeticTarget::D)),
            0x8b => Some(Instruction::Adc(ArithmeticTarget::E)),
            0x8c => Some(Instruction::Adc(ArithmeticTarget::H)),
            0x8d => Some(Instruction::Adc(ArithmeticTarget::L)),
            0x8e => Some(Instruction::Adc(ArithmeticTarget::HLTarget)),
            0x8f => Some(Instruction::Adc(ArithmeticTarget::A)),
            // SUB
            0x90 => Some(Instruction::Sub(ArithmeticTarget::B)),
            0x91 => Some(Instruction::Sub(ArithmeticTarget::C)),
            0x92 => Some(Instruction::Sub(ArithmeticTarget::D)),
            0x93 => Some(Instruction::Sub(ArithmeticTarget::E)),
            0x94 => Some(Instruction::Sub(ArithmeticTarget::H)),
            0x95 => Some(Instruction::Sub(ArithmeticTarget::L)),
            0x96 => Some(Instruction::Sub(ArithmeticTarget::HLTarget)),
            0x97 => Some(Instruction::Sub(ArithmeticTarget::A)),
            // SBC
            0x98 => Some(Instruction::Sbc(ArithmeticTarget::B)),
            0x99 => Some(Instruction::Sbc(ArithmeticTarget::C)),
            0x9a => Some(Instruction::Sbc(ArithmeticTarget::D)),
            0x9b => Some(Instruction::Sbc(ArithmeticTarget::E)),
            0x9c => Some(Instruction::Sbc(ArithmeticTarget::H)),
            0x9d => Some(Instruction::Sbc(ArithmeticTarget::L)),
            0x9e => Some(Instruction::Sbc(ArithmeticTarget::HLTarget)),
            0x9f => Some(Instruction::Sbc(ArithmeticTarget::A)),
            // AND
            0xa0 => Some(Instruction::And(ArithmeticTarget::B)),
            0xa1 => Some(Instruction::And(ArithmeticTarget::C)),
            0xa2 => Some(Instruction::And(ArithmeticTarget::D)),
            0xa3 => Some(Instruction::And(ArithmeticTarget::E)),
            0xa4 => Some(Instruction::And(ArithmeticTarget::H)),
            0xa5 => Some(Instruction::And(ArithmeticTarget::L)),
            0xa6 => Some(Instruction::And(ArithmeticTarget::HLTarget)),
            0xa7 => Some(Instruction::And(ArithmeticTarget::A)),
            // XOR
            0xa8 => Some(Instruction::Xor(ArithmeticTarget::B)),
            0xa9 => Some(Instruction::Xor(ArithmeticTarget::C)),
            0xaa => Some(Instruction::Xor(ArithmeticTarget::D)),
            0xab => Some(Instruction::Xor(ArithmeticTarget::E)),
            0xac => Some(Instruction::Xor(ArithmeticTarget::H)),
            0xad => Some(Instruction::Xor(ArithmeticTarget::L)),
            0xae => Some(Instruction::Xor(ArithmeticTarget::HLTarget)),
            0xaf => Some(Instruction::Xor(ArithmeticTarget::A)),
            // OR
            0xb0 => Some(Instruction::Or(ArithmeticTarget::B)),
            0xb1 => Some(Instruction::Or(ArithmeticTarget::C)),
            0xb2 => Some(Instruction::Or(ArithmeticTarget::D)),
            0xb3 => Some(Instruction::Or(ArithmeticTarget::E)),
            0xb4 => Some(Instruction::Or(ArithmeticTarget::H)),
            0xb5 => Some(Instruction::Or(ArithmeticTarget::L)),
            0xb6 => Some(Instruction::Or(ArithmeticTarget::HLTarget)),
            0xb7 => Some(Instruction::Or(ArithmeticTarget::A)),
            // CP
            0xb8 => Some(Instruction::Cp(ArithmeticTarget::B)),
            0xb9 => Some(Instruction::Cp(ArithmeticTarget::C)),
            0xba => Some(Instruction::Cp(ArithmeticTarget::D)),
            0xbb => Some(Instruction::Cp(ArithmeticTarget::E)),
            0xbc => Some(Instruction::Cp(ArithmeticTarget::H)),
            0xbd => Some(Instruction::Cp(ArithmeticTarget::L)),
            0xbe => Some(Instruction::Cp(ArithmeticTarget::HLTarget)),
            0xbf => Some(Instruction::Cp(ArithmeticTarget::A)),
            // Stack manipulation
            0xc0 => Some(Instruction::Ret(JumpTest::NotZero)),
            0xc1 => Some(Instruction::Pop(WideArithmeticTarget::BC)),
            // CHECKME
            0xc2 => Some(Instruction::Jump(JumpTest::NotZero, JumpType::Pointer16)),
            0xc3 => Some(Instruction::Jump(JumpTest::Always, JumpType::Pointer16)),
            0xc4 => Some(Instruction::Call(JumpTest::NotZero)),
            0xc5 => Some(Instruction::Push(WideArithmeticTarget::BC)),
            0xc6 => unimplemented!("0x{:x}", byte),
            0xc7 => Some(Instruction::Rst(0x00)),
            0xc8 => Some(Instruction::Ret(JumpTest::Zero)),
            0xc9 => Some(Instruction::Ret(JumpTest::Always)),
            0xca => Some(Instruction::Jump(JumpTest::Zero, JumpType::Pointer16)),
            0xcb => unimplemented!("0x{:x}", byte),
            0xcc => unimplemented!("0x{:x}", byte),
            0xcd => Some(Instruction::Call(JumpTest::Always)),
            0xce => Some(Instruction::Adc(ArithmeticTarget::ReadByte)),
            0xcf => Some(Instruction::Rst(0x08)),
            0xd0 => Some(Instruction::Ret(JumpTest::NotCarry)),
            0xd1 => Some(Instruction::Pop(WideArithmeticTarget::DE)),
            0xd2 => Some(Instruction::Jump(JumpTest::NotCarry, JumpType::Pointer16)),
            0xd3 => None,
            0xd4 => unimplemented!("0x{:x}", byte),
            0xd5 => Some(Instruction::Push(WideArithmeticTarget::DE)),
            0xd6 => Some(Instruction::Sub(ArithmeticTarget::ReadByte)),
            0xd7 => Some(Instruction::Rst(0x10)),
            0xd8 => Some(Instruction::Ret(JumpTest::Carry)),
            // RETI
            0xd9 => unimplemented!("0x{:x}", byte),
            0xda => Some(Instruction::Jump(JumpTest::Carry, JumpType::Pointer16)),
            0xdb => None,
            0xdc => unimplemented!("0x{:x}", byte),
            0xdd => None,
            0xde => unimplemented!("0x{:x}", byte),
            0xdf => Some(Instruction::Rst(0x18)),
            0xe0 => Some(Instruction::Load {
                to: ArithmeticTarget::FFRead,
                from: ArithmeticTarget::A,
            }),
            0xe1 => Some(Instruction::Pop(WideArithmeticTarget::HL)),
            0xe2 => Some(Instruction::Load {
                to: ArithmeticTarget::FFC,
                from: ArithmeticTarget::A,
            }),
            0xe3 => None,
            0xe4 => None,
            0xe5 => Some(Instruction::Push(WideArithmeticTarget::HL)),
            0xe6 => Some(Instruction::And(ArithmeticTarget::ReadByte)),
            0xe7 => Some(Instruction::Rst(0x20)),
            0xe8 => Some(Instruction::AddSp),
            0xe9 => Some(Instruction::Jump(JumpTest::Always, JumpType::HL)),
            0xea => Some(Instruction::Load {
                from: ArithmeticTarget::A,
                to: ArithmeticTarget::Pointer,
            }),
            0xeb => None,
            0xec => None,
            0xed => None,
            0xee => unimplemented!("0x{:x}", byte),
            0xef => Some(Instruction::Rst(0x28)),
            0xf0 => Some(Instruction::Load {
                from: ArithmeticTarget::FFRead,
                to: ArithmeticTarget::A,
            }),
            0xf1 => Some(Instruction::Pop(WideArithmeticTarget::AF)),
            0xf2 => Some(Instruction::Load {
                from: ArithmeticTarget::FFC,
                to: ArithmeticTarget::A,
            }),
            0xf3 => Some(Instruction::DisableInterrupt),
            0xf4 => None,
            0xf5 => Some(Instruction::Push(WideArithmeticTarget::AF)),
            0xf6 => Some(Instruction::Or(ArithmeticTarget::ReadByte)),
            0xf7 => Some(Instruction::Rst(0x30)),
            0xf8 => unimplemented!("0x{:x}", byte),
            0xf9 => Some(Instruction::Load16 {
                from: WideArithmeticTarget::HL,
                to: WideArithmeticTarget::SP,
            }),
            0xfa => Some(Instruction::Load {
                to: ArithmeticTarget::A,
                from: ArithmeticTarget::Pointer,
            }),
            0xfb => Some(Instruction::EnableInterrupt),
            0xfc => None,
            0xfd => None,
            0xfe => Some(Instruction::Cp(ArithmeticTarget::ReadByte)),
            0xff => Some(Instruction::Rst(0x38)),
        }
    }

    pub fn from_prefixed_byte(byte: u8) -> Option<Instruction> {
        match byte {
            // RLC
            0x00 => Some(Instruction::Rlc(ArithmeticTarget::B)),
            0x01 => Some(Instruction::Rlc(ArithmeticTarget::C)),
            0x02 => Some(Instruction::Rlc(ArithmeticTarget::D)),
            0x03 => Some(Instruction::Rlc(ArithmeticTarget::E)),
            0x04 => Some(Instruction::Rlc(ArithmeticTarget::H)),
            0x05 => Some(Instruction::Rlc(ArithmeticTarget::L)),
            0x06 => Some(Instruction::Rlc(ArithmeticTarget::HLTarget)),
            0x07 => Some(Instruction::Rlc(ArithmeticTarget::A)),
            // RRC
            0x08 => Some(Instruction::Rrc(ArithmeticTarget::B)),
            0x09 => Some(Instruction::Rrc(ArithmeticTarget::C)),
            0x0a => Some(Instruction::Rrc(ArithmeticTarget::D)),
            0x0b => Some(Instruction::Rrc(ArithmeticTarget::E)),
            0x0c => Some(Instruction::Rrc(ArithmeticTarget::H)),
            0x0d => Some(Instruction::Rrc(ArithmeticTarget::L)),
            0x0e => Some(Instruction::Rrc(ArithmeticTarget::HLTarget)),
            0x0f => Some(Instruction::Rrc(ArithmeticTarget::A)),
            // RL
            0x10 => Some(Instruction::Rl(ArithmeticTarget::B)),
            0x11 => Some(Instruction::Rl(ArithmeticTarget::C)),
            0x12 => Some(Instruction::Rl(ArithmeticTarget::D)),
            0x13 => Some(Instruction::Rl(ArithmeticTarget::E)),
            0x14 => Some(Instruction::Rl(ArithmeticTarget::H)),
            0x15 => Some(Instruction::Rl(ArithmeticTarget::L)),
            0x16 => Some(Instruction::Rl(ArithmeticTarget::HLTarget)),
            0x17 => Some(Instruction::Rl(ArithmeticTarget::A)),
            // RR
            0x18 => Some(Instruction::Rr(ArithmeticTarget::B)),
            0x19 => Some(Instruction::Rr(ArithmeticTarget::C)),
            0x1a => Some(Instruction::Rr(ArithmeticTarget::D)),
            0x1b => Some(Instruction::Rr(ArithmeticTarget::E)),
            0x1c => Some(Instruction::Rr(ArithmeticTarget::H)),
            0x1d => Some(Instruction::Rr(ArithmeticTarget::L)),
            0x1e => Some(Instruction::Rr(ArithmeticTarget::HLTarget)),
            0x1f => Some(Instruction::Rr(ArithmeticTarget::A)),
            // SLA
            0x20 => Some(Instruction::Sla(ArithmeticTarget::B)),
            0x21 => Some(Instruction::Sla(ArithmeticTarget::C)),
            0x22 => Some(Instruction::Sla(ArithmeticTarget::D)),
            0x23 => Some(Instruction::Sla(ArithmeticTarget::E)),
            0x24 => Some(Instruction::Sla(ArithmeticTarget::H)),
            0x25 => Some(Instruction::Sla(ArithmeticTarget::L)),
            0x26 => Some(Instruction::Sla(ArithmeticTarget::HLTarget)),
            0x27 => Some(Instruction::Sla(ArithmeticTarget::A)),
            // SRA
            0x28 => Some(Instruction::Sra(ArithmeticTarget::B)),
            0x29 => Some(Instruction::Sra(ArithmeticTarget::C)),
            0x2a => Some(Instruction::Sra(ArithmeticTarget::D)),
            0x2b => Some(Instruction::Sra(ArithmeticTarget::E)),
            0x2c => Some(Instruction::Sra(ArithmeticTarget::H)),
            0x2d => Some(Instruction::Sra(ArithmeticTarget::L)),
            0x2e => Some(Instruction::Sra(ArithmeticTarget::HLTarget)),
            0x2f => Some(Instruction::Sra(ArithmeticTarget::A)),
            // SWAP
            0x30 => Some(Instruction::Swap(ArithmeticTarget::B)),
            0x31 => Some(Instruction::Swap(ArithmeticTarget::C)),
            0x32 => Some(Instruction::Swap(ArithmeticTarget::D)),
            0x33 => Some(Instruction::Swap(ArithmeticTarget::E)),
            0x34 => Some(Instruction::Swap(ArithmeticTarget::H)),
            0x35 => Some(Instruction::Swap(ArithmeticTarget::L)),
            0x36 => Some(Instruction::Swap(ArithmeticTarget::HLTarget)),
            0x37 => Some(Instruction::Swap(ArithmeticTarget::A)),
            // SRL
            0x38 => Some(Instruction::Srl(ArithmeticTarget::B)),
            0x39 => Some(Instruction::Srl(ArithmeticTarget::C)),
            0x3a => Some(Instruction::Srl(ArithmeticTarget::D)),
            0x3b => Some(Instruction::Srl(ArithmeticTarget::E)),
            0x3c => Some(Instruction::Srl(ArithmeticTarget::H)),
            0x3d => Some(Instruction::Srl(ArithmeticTarget::L)),
            0x3e => Some(Instruction::Srl(ArithmeticTarget::HLTarget)),
            0x3f => Some(Instruction::Srl(ArithmeticTarget::A)),
            // BIT
            0x40 => Some(Instruction::Bit(ArithmeticTarget::B, 0)),
            0x41 => Some(Instruction::Bit(ArithmeticTarget::C, 0)),
            0x42 => Some(Instruction::Bit(ArithmeticTarget::D, 0)),
            0x43 => Some(Instruction::Bit(ArithmeticTarget::E, 0)),
            0x44 => Some(Instruction::Bit(ArithmeticTarget::H, 0)),
            0x45 => Some(Instruction::Bit(ArithmeticTarget::L, 0)),
            0x46 => Some(Instruction::Bit(ArithmeticTarget::HLTarget, 0)),
            0x47 => Some(Instruction::Bit(ArithmeticTarget::A, 0)),
            0x48 => Some(Instruction::Bit(ArithmeticTarget::B, 1)),
            0x49 => Some(Instruction::Bit(ArithmeticTarget::C, 1)),
            0x4a => Some(Instruction::Bit(ArithmeticTarget::D, 1)),
            0x4b => Some(Instruction::Bit(ArithmeticTarget::E, 1)),
            0x4c => Some(Instruction::Bit(ArithmeticTarget::H, 1)),
            0x4d => Some(Instruction::Bit(ArithmeticTarget::L, 1)),
            0x4e => Some(Instruction::Bit(ArithmeticTarget::HLTarget, 1)),
            0x4f => Some(Instruction::Bit(ArithmeticTarget::A, 1)),
            0x50 => Some(Instruction::Bit(ArithmeticTarget::B, 2)),
            0x51 => Some(Instruction::Bit(ArithmeticTarget::C, 2)),
            0x52 => Some(Instruction::Bit(ArithmeticTarget::D, 2)),
            0x53 => Some(Instruction::Bit(ArithmeticTarget::E, 2)),
            0x54 => Some(Instruction::Bit(ArithmeticTarget::H, 2)),
            0x55 => Some(Instruction::Bit(ArithmeticTarget::L, 2)),
            0x56 => Some(Instruction::Bit(ArithmeticTarget::HLTarget, 2)),
            0x57 => Some(Instruction::Bit(ArithmeticTarget::A, 2)),
            0x58 => Some(Instruction::Bit(ArithmeticTarget::B, 3)),
            0x59 => Some(Instruction::Bit(ArithmeticTarget::C, 3)),
            0x5a => Some(Instruction::Bit(ArithmeticTarget::D, 3)),
            0x5b => Some(Instruction::Bit(ArithmeticTarget::E, 3)),
            0x5c => Some(Instruction::Bit(ArithmeticTarget::H, 3)),
            0x5d => Some(Instruction::Bit(ArithmeticTarget::L, 3)),
            0x5e => Some(Instruction::Bit(ArithmeticTarget::HLTarget, 3)),
            0x5f => Some(Instruction::Bit(ArithmeticTarget::A, 3)),
            0x60 => Some(Instruction::Bit(ArithmeticTarget::B, 4)),
            0x61 => Some(Instruction::Bit(ArithmeticTarget::C, 4)),
            0x62 => Some(Instruction::Bit(ArithmeticTarget::D, 4)),
            0x63 => Some(Instruction::Bit(ArithmeticTarget::E, 4)),
            0x64 => Some(Instruction::Bit(ArithmeticTarget::H, 4)),
            0x65 => Some(Instruction::Bit(ArithmeticTarget::L, 4)),
            0x66 => Some(Instruction::Bit(ArithmeticTarget::HLTarget, 4)),
            0x67 => Some(Instruction::Bit(ArithmeticTarget::A, 4)),
            0x68 => Some(Instruction::Bit(ArithmeticTarget::B, 5)),
            0x69 => Some(Instruction::Bit(ArithmeticTarget::C, 5)),
            0x6a => Some(Instruction::Bit(ArithmeticTarget::D, 5)),
            0x6b => Some(Instruction::Bit(ArithmeticTarget::E, 5)),
            0x6c => Some(Instruction::Bit(ArithmeticTarget::H, 5)),
            0x6d => Some(Instruction::Bit(ArithmeticTarget::L, 5)),
            0x6e => Some(Instruction::Bit(ArithmeticTarget::HLTarget, 5)),
            0x6f => Some(Instruction::Bit(ArithmeticTarget::A, 5)),
            0x70 => Some(Instruction::Bit(ArithmeticTarget::B, 6)),
            0x71 => Some(Instruction::Bit(ArithmeticTarget::C, 6)),
            0x72 => Some(Instruction::Bit(ArithmeticTarget::D, 6)),
            0x73 => Some(Instruction::Bit(ArithmeticTarget::E, 6)),
            0x74 => Some(Instruction::Bit(ArithmeticTarget::H, 6)),
            0x75 => Some(Instruction::Bit(ArithmeticTarget::L, 6)),
            0x76 => Some(Instruction::Bit(ArithmeticTarget::HLTarget, 6)),
            0x77 => Some(Instruction::Bit(ArithmeticTarget::A, 6)),
            0x78 => Some(Instruction::Bit(ArithmeticTarget::B, 7)),
            0x79 => Some(Instruction::Bit(ArithmeticTarget::C, 7)),
            0x7a => Some(Instruction::Bit(ArithmeticTarget::D, 7)),
            0x7b => Some(Instruction::Bit(ArithmeticTarget::E, 7)),
            0x7c => Some(Instruction::Bit(ArithmeticTarget::H, 7)),
            0x7d => Some(Instruction::Bit(ArithmeticTarget::L, 7)),
            0x7e => Some(Instruction::Bit(ArithmeticTarget::HLTarget, 7)),
            0x7f => Some(Instruction::Bit(ArithmeticTarget::A, 7)),
            // Res
            0x80 => Some(Instruction::Res(ArithmeticTarget::B, 0)),
            0x81 => Some(Instruction::Res(ArithmeticTarget::C, 0)),
            0x82 => Some(Instruction::Res(ArithmeticTarget::D, 0)),
            0x83 => Some(Instruction::Res(ArithmeticTarget::E, 0)),
            0x84 => Some(Instruction::Res(ArithmeticTarget::H, 0)),
            0x85 => Some(Instruction::Res(ArithmeticTarget::L, 0)),
            0x86 => Some(Instruction::Res(ArithmeticTarget::HLTarget, 0)),
            0x87 => Some(Instruction::Res(ArithmeticTarget::A, 0)),
            0x88 => Some(Instruction::Res(ArithmeticTarget::B, 1)),
            0x89 => Some(Instruction::Res(ArithmeticTarget::C, 1)),
            0x8a => Some(Instruction::Res(ArithmeticTarget::D, 1)),
            0x8b => Some(Instruction::Res(ArithmeticTarget::E, 1)),
            0x8c => Some(Instruction::Res(ArithmeticTarget::H, 1)),
            0x8d => Some(Instruction::Res(ArithmeticTarget::L, 1)),
            0x8e => Some(Instruction::Res(ArithmeticTarget::HLTarget, 1)),
            0x8f => Some(Instruction::Res(ArithmeticTarget::A, 1)),
            0x90 => Some(Instruction::Res(ArithmeticTarget::B, 2)),
            0x91 => Some(Instruction::Res(ArithmeticTarget::C, 2)),
            0x92 => Some(Instruction::Res(ArithmeticTarget::D, 2)),
            0x93 => Some(Instruction::Res(ArithmeticTarget::E, 2)),
            0x94 => Some(Instruction::Res(ArithmeticTarget::H, 2)),
            0x95 => Some(Instruction::Res(ArithmeticTarget::L, 2)),
            0x96 => Some(Instruction::Res(ArithmeticTarget::HLTarget, 2)),
            0x97 => Some(Instruction::Res(ArithmeticTarget::A, 2)),
            0x98 => Some(Instruction::Res(ArithmeticTarget::B, 3)),
            0x99 => Some(Instruction::Res(ArithmeticTarget::C, 3)),
            0x9a => Some(Instruction::Res(ArithmeticTarget::D, 3)),
            0x9b => Some(Instruction::Res(ArithmeticTarget::E, 3)),
            0x9c => Some(Instruction::Res(ArithmeticTarget::H, 3)),
            0x9d => Some(Instruction::Res(ArithmeticTarget::L, 3)),
            0x9e => Some(Instruction::Res(ArithmeticTarget::HLTarget, 3)),
            0x9f => Some(Instruction::Res(ArithmeticTarget::A, 3)),
            0xa0 => Some(Instruction::Res(ArithmeticTarget::B, 4)),
            0xa1 => Some(Instruction::Res(ArithmeticTarget::C, 4)),
            0xa2 => Some(Instruction::Res(ArithmeticTarget::D, 4)),
            0xa3 => Some(Instruction::Res(ArithmeticTarget::E, 4)),
            0xa4 => Some(Instruction::Res(ArithmeticTarget::H, 4)),
            0xa5 => Some(Instruction::Res(ArithmeticTarget::L, 4)),
            0xa6 => Some(Instruction::Res(ArithmeticTarget::HLTarget, 4)),
            0xa7 => Some(Instruction::Res(ArithmeticTarget::A, 4)),
            0xa8 => Some(Instruction::Res(ArithmeticTarget::B, 5)),
            0xa9 => Some(Instruction::Res(ArithmeticTarget::C, 5)),
            0xaa => Some(Instruction::Res(ArithmeticTarget::D, 5)),
            0xab => Some(Instruction::Res(ArithmeticTarget::E, 5)),
            0xac => Some(Instruction::Res(ArithmeticTarget::H, 5)),
            0xad => Some(Instruction::Res(ArithmeticTarget::L, 5)),
            0xae => Some(Instruction::Res(ArithmeticTarget::HLTarget, 5)),
            0xaf => Some(Instruction::Res(ArithmeticTarget::A, 5)),
            0xb0 => Some(Instruction::Res(ArithmeticTarget::B, 6)),
            0xb1 => Some(Instruction::Res(ArithmeticTarget::C, 6)),
            0xb2 => Some(Instruction::Res(ArithmeticTarget::D, 6)),
            0xb3 => Some(Instruction::Res(ArithmeticTarget::E, 6)),
            0xb4 => Some(Instruction::Res(ArithmeticTarget::H, 6)),
            0xb5 => Some(Instruction::Res(ArithmeticTarget::L, 6)),
            0xb6 => Some(Instruction::Res(ArithmeticTarget::HLTarget, 6)),
            0xb7 => Some(Instruction::Res(ArithmeticTarget::A, 6)),
            0xb8 => Some(Instruction::Res(ArithmeticTarget::B, 7)),
            0xb9 => Some(Instruction::Res(ArithmeticTarget::C, 7)),
            0xba => Some(Instruction::Res(ArithmeticTarget::D, 7)),
            0xbb => Some(Instruction::Res(ArithmeticTarget::E, 7)),
            0xbc => Some(Instruction::Res(ArithmeticTarget::H, 7)),
            0xbd => Some(Instruction::Res(ArithmeticTarget::L, 7)),
            0xbe => Some(Instruction::Res(ArithmeticTarget::HLTarget, 7)),
            0xbf => Some(Instruction::Res(ArithmeticTarget::A, 7)),
            // set byte
            0xc0 => Some(Instruction::Set(ArithmeticTarget::B, 0)),
            0xc1 => Some(Instruction::Set(ArithmeticTarget::C, 0)),
            0xc2 => Some(Instruction::Set(ArithmeticTarget::D, 0)),
            0xc3 => Some(Instruction::Set(ArithmeticTarget::E, 0)),
            0xc4 => Some(Instruction::Set(ArithmeticTarget::H, 0)),
            0xc5 => Some(Instruction::Set(ArithmeticTarget::L, 0)),
            0xc6 => Some(Instruction::Set(ArithmeticTarget::HLTarget, 0)),
            0xc7 => Some(Instruction::Set(ArithmeticTarget::A, 0)),
            0xc8 => Some(Instruction::Set(ArithmeticTarget::B, 1)),
            0xc9 => Some(Instruction::Set(ArithmeticTarget::C, 1)),
            0xca => Some(Instruction::Set(ArithmeticTarget::D, 1)),
            0xcb => Some(Instruction::Set(ArithmeticTarget::E, 1)),
            0xcc => Some(Instruction::Set(ArithmeticTarget::H, 1)),
            0xcd => Some(Instruction::Set(ArithmeticTarget::L, 1)),
            0xce => Some(Instruction::Set(ArithmeticTarget::HLTarget, 1)),
            0xcf => Some(Instruction::Set(ArithmeticTarget::A, 1)),
            0xd0 => Some(Instruction::Set(ArithmeticTarget::B, 2)),
            0xd1 => Some(Instruction::Set(ArithmeticTarget::C, 2)),
            0xd2 => Some(Instruction::Set(ArithmeticTarget::D, 2)),
            0xd3 => Some(Instruction::Set(ArithmeticTarget::E, 2)),
            0xd4 => Some(Instruction::Set(ArithmeticTarget::H, 2)),
            0xd5 => Some(Instruction::Set(ArithmeticTarget::L, 2)),
            0xd6 => Some(Instruction::Set(ArithmeticTarget::HLTarget, 2)),
            0xd7 => Some(Instruction::Set(ArithmeticTarget::A, 2)),
            0xd8 => Some(Instruction::Set(ArithmeticTarget::B, 3)),
            0xd9 => Some(Instruction::Set(ArithmeticTarget::C, 3)),
            0xda => Some(Instruction::Set(ArithmeticTarget::D, 3)),
            0xdb => Some(Instruction::Set(ArithmeticTarget::E, 3)),
            0xdc => Some(Instruction::Set(ArithmeticTarget::H, 3)),
            0xdd => Some(Instruction::Set(ArithmeticTarget::L, 3)),
            0xde => Some(Instruction::Set(ArithmeticTarget::HLTarget, 3)),
            0xdf => Some(Instruction::Set(ArithmeticTarget::A, 3)),
            0xe0 => Some(Instruction::Set(ArithmeticTarget::B, 4)),
            0xe1 => Some(Instruction::Set(ArithmeticTarget::C, 4)),
            0xe2 => Some(Instruction::Set(ArithmeticTarget::D, 4)),
            0xe3 => Some(Instruction::Set(ArithmeticTarget::E, 4)),
            0xe4 => Some(Instruction::Set(ArithmeticTarget::H, 4)),
            0xe5 => Some(Instruction::Set(ArithmeticTarget::L, 4)),
            0xe6 => Some(Instruction::Set(ArithmeticTarget::HLTarget, 4)),
            0xe7 => Some(Instruction::Set(ArithmeticTarget::A, 4)),
            0xe8 => Some(Instruction::Set(ArithmeticTarget::B, 5)),
            0xe9 => Some(Instruction::Set(ArithmeticTarget::C, 5)),
            0xea => Some(Instruction::Set(ArithmeticTarget::D, 5)),
            0xeb => Some(Instruction::Set(ArithmeticTarget::E, 5)),
            0xec => Some(Instruction::Set(ArithmeticTarget::H, 5)),
            0xed => Some(Instruction::Set(ArithmeticTarget::L, 5)),
            0xee => Some(Instruction::Set(ArithmeticTarget::HLTarget, 5)),
            0xef => Some(Instruction::Set(ArithmeticTarget::A, 5)),
            0xf0 => Some(Instruction::Set(ArithmeticTarget::B, 6)),
            0xf1 => Some(Instruction::Set(ArithmeticTarget::C, 6)),
            0xf2 => Some(Instruction::Set(ArithmeticTarget::D, 6)),
            0xf3 => Some(Instruction::Set(ArithmeticTarget::E, 6)),
            0xf4 => Some(Instruction::Set(ArithmeticTarget::H, 6)),
            0xf5 => Some(Instruction::Set(ArithmeticTarget::L, 6)),
            0xf6 => Some(Instruction::Set(ArithmeticTarget::HLTarget, 6)),
            0xf7 => Some(Instruction::Set(ArithmeticTarget::A, 6)),
            0xf8 => Some(Instruction::Set(ArithmeticTarget::B, 7)),
            0xf9 => Some(Instruction::Set(ArithmeticTarget::C, 7)),
            0xfa => Some(Instruction::Set(ArithmeticTarget::D, 7)),
            0xfb => Some(Instruction::Set(ArithmeticTarget::E, 7)),
            0xfc => Some(Instruction::Set(ArithmeticTarget::H, 7)),
            0xfd => Some(Instruction::Set(ArithmeticTarget::L, 7)),
            0xfe => Some(Instruction::Set(ArithmeticTarget::HLTarget, 7)),
            0xff => Some(Instruction::Set(ArithmeticTarget::A, 7)),
        }
    }
}

impl ToString for Instruction {
    fn to_string(&self) -> String {
        match self {
            Instruction::Nop => "nop".to_string(),
            Instruction::Adc(_) => "adc".to_string(),
            Instruction::Add(_) => "add".to_string(),
            Instruction::AddHL(_) => "addhl".to_string(),
            Instruction::AddSp => "add sp".to_string(),
            Instruction::And(_) => "and".to_string(),
            Instruction::Ccf => "ccf".to_string(),
            Instruction::Cp(target) => format!("cp {:?}", target),
            Instruction::Cpl => "cpl".to_string(),
            Instruction::Dec(target) => format!("dec {:?}", target),
            Instruction::Dec16(target) => format!("dec16 {:?}", target),
            Instruction::Inc(target) => format!("inc {:?}", target),
            Instruction::Inc16(target) => format!("inc16 {:?}", target),
            Instruction::Or(_) => "or".to_string(),
            Instruction::Rla => "rla".to_string(),
            Instruction::Rlc(_) => "rlc".to_string(),
            Instruction::Rl(target) => format!("rl {:?}", target),
            Instruction::Rr(_) => "rr".to_string(),
            Instruction::Rra => "rra".to_string(),
            Instruction::Rrc(_) => "rrc".to_string(),
            Instruction::Rrca => "rrca".to_string(),
            Instruction::Rlca => "rlca".to_string(),
            Instruction::Sbc(_) => "sbc".to_string(),
            Instruction::Sla(_) => "sla".to_string(),
            Instruction::Sra(_) => "sra".to_string(),
            Instruction::Srl(_) => "srl".to_string(),
            Instruction::Sub(_) => "sub".to_string(),
            Instruction::Swap(_) => "swap".to_string(),
            Instruction::Xor(target) => format!("xor {:?}^A", target),
            Instruction::Load { from, to } => format!("load {:?}->{:?}", from, to),
            Instruction::Load16 { from, to } => format!("load16 {:?}->{:?}", from, to),
            Instruction::Jump(test, kind) => format!("jump-{:?}-{:?}", test, kind),
            Instruction::Push(target) => format!("push {:?} to stack", target),
            Instruction::Pop(_) => "pop".to_string(),
            Instruction::Call(_) => "call".to_string(),
            Instruction::Ret(_) => "ret".to_string(),
            Instruction::Bit(target, bit_number) => format!("bit {} of {:?}", bit_number, target),
            Instruction::Set(_, _) => "set".to_string(),
            Instruction::Res(_, _) => "res".to_string(),
            Instruction::Halt => "halt".to_string(),
            Instruction::DisableInterrupt => "disable interrupt".to_string(),
            Instruction::EnableInterrupt => "enable interrupt".to_string(),
            Instruction::Stop => "Stop".to_string(),
            Instruction::Rst(address) => format!("Reset to address {:02x}", address),
            Instruction::Scf => "Set Carry Flag".to_string(),
            Instruction::Daa => "DAA".to_string(),
        }
    }
}
